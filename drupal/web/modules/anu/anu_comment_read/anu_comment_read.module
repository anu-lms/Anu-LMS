<?php

/**
 * @file
 * Contains functionality related to comments read status feature.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function anu_comment_read_user_delete(EntityInterface $entity) {
  try {
    // Delete all existing entities which refer this user.
    $controller = \Drupal::entityTypeManager()->getStorage('paragraph_comment_read');
    $entities = $controller->loadByProperties([
      'uid' => $entity->id(),
    ]);
    $controller->delete($entities);
  }
  catch (\Exception $e) {
    $message = 'Could not remove comments read entity when user with id @id was deleted. Error: @error.';
    $params = [
      '@id' => $entity->id(),
      '@error' => $e->getMessage(),
    ];
    \Drupal::logger('anu_comment_read')->critical($message, $params);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function anu_comment_read_paragraph_comment_delete(EntityInterface $entity) {
  try {
    // Delete all existing entities which refer this comment.
    $controller = \Drupal::entityTypeManager()->getStorage('paragraph_comment_read');
    $entities = $controller->loadByProperties([
      'field_comment' => $entity->id(),
    ]);
    $controller->delete($entities);
  }
  catch (\Exception $e) {
    $message = 'Could not remove comments read entity when comment with id @id was deleted. Error: @error.';
    $params = [
      '@id' => $entity->id(),
      '@error' => $e->getMessage(),
    ];
    \Drupal::logger('anu_comment_read')->critical($message, $params);
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function anu_comment_read_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'paragraph_comment') {
    $fields = [];

    // Add a field that shows whether comment is read by current user or not.
    $fields['is_read'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Is read'))
      ->setDescription(t('Whether comment is read by current user or not.'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\anu_comment_read\CommentReadStatus');

    return $fields;
  }
}

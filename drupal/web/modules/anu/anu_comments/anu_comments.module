<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\user\Entity\User;
use Drupal\eck\Entity\EckEntity;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_entity_presave().
 */
function anu_comments_entity_presave(EntityInterface $entity) {
  if ($entity instanceof EckEntity && $entity->getEntityTypeId() == 'paragraph_comment') {
    try {
      // Enables revisions for comment entity by default.
      $entity->setNewRevision(TRUE);

      // Set empty value for comment_mentions field if comment text is empty.
      $ids = [];
      $text = $entity->field_comment_text->getValue();
      if (empty($text[0]['value'])) {
        $entity->field_comment_mentions = $ids;
        return;
      }

      // We parse comment body for @username and save found users to the comment_mentions field.
      $pattern = "/<span class=\'tagged-user\'>@([^<>]*)<\/span>/";
      if (preg_match_all($pattern, $text[0]['value'], $matches)) {
        if (empty($matches)) {
          $entity->field_comment_mentions = $ids;
          return;
        }

        $ids = \Drupal::entityQuery('user')
          ->condition('name', $matches[1], 'IN')
          ->execute();
      }

      $entity->field_comment_mentions = $ids;
    }
    catch (\Exception $exception) {
      $message = new FormattableMarkup('Could not parse comment body for mentions. Error: @error', [
        '@error' => $exception->getMessage(),
      ]);
      \Drupal::logger('anu_comments')->critical($message);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function anu_comments_paragraph_comment_access(EntityInterface $comment, $operation, AccountInterface $account) {

  // Load the user object with all fields.
  $user = User::load($account->id());

  // Get value of the current user organization.
  $user_organizations = [];
  if ($user->hasField('field_organization')) {
    $user_organizations = array_column($user->get('field_organization')->getValue(), 'target_id');
  }

  // Get value of the comment's organization in which the comment had been
  // left off.
  $comment_organization = NULL;
  if ($comment->hasField('field_comment_organization')) {
    $value = $comment->get('field_comment_organization')->getValue();
    $comment_organization = !empty($value[0]['target_id']) ? $value[0]['target_id'] : NULL;
  }

  // We do not allow users from different organization has any access to the
  // comments from other organizations. In the other scenario we fallback to
  // other Drupal access checks.
  return (empty($user_organizations) && empty($comment_organization)) || in_array($comment_organization, $user_organizations)
    ? AccessResult::neutral()
    : AccessResult::forbidden();
}

/**
 * Implements hook_entity_type_alter().
 */
function anu_comments_entity_type_alter(array &$entity_types) {
  // Adds an additional Validation for paragraph_comment entity.
  if (!empty($entity_types['paragraph_comment'])) {
    $entity = $entity_types['paragraph_comment'];
    $entity->addConstraint('ParagraphComment', []);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 */
function anu_comments_paragraph_comment_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  \Drupal::service('anu_comments.comment')->pushEntity($entity, 'insert');
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 */
function anu_comments_paragraph_comment_update(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  \Drupal::service('anu_comments.comment')->pushEntity($entity, 'update');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 */
function anu_comments_paragraph_comment_delete(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  \Drupal::service('anu_comments.comment')->pushEntity($entity, 'delete');
}

<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\user\Entity\User;
use Drupal\eck\Entity\EckEntity;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use ElephantIO\Client;
use ElephantIO\Engine\SocketIO\Version2X;
use Drupal\anu_normalizer\AnuNormalizerBase;

/**
 * Enables revisions for comment entity by default.
 */
function anu_comments_entity_presave(EntityInterface $entity) {
  if ($entity instanceof EckEntity && $entity->getEntityTypeId() == 'paragraph_comment') {
    $entity->setNewRevision(TRUE);
  }
}

function sendEvent($entity) {

  try {

    // Load notification message.
    $message = AnuNormalizerBase::normalizeEntity($entity, ['lesson']);

    if (!$message) {
      throw new \Exception("Message entity can't be normalized.");
    }

    // Get websocket URL.
    $websocket = \Drupal::request()->getSchemeAndHttpHost();

    // Send notification message to websocket.
    $httpContext = [
      'header' => [
        'Origin: ' . $websocket,
      ],
    ];

    $client = new Client(new Version2X($websocket, [
      'context' => [
        'http' => $httpContext,
      ],
    ]));

    $client->initialize();
    $client->emit('comment', \Drupal::service('serializer')
      ->normalize($message, 'json'));
    $client->close();
  }
  catch (\Exception $exception) {

    \Drupal::logger('anu_events')
      ->critical('Could not write notification to socket. Error: @error', [
        '@error' => $exception->getMessage(),
      ]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function anu_comments_paragraph_comment_access(EntityInterface $comment, $operation, AccountInterface $account) {

  // Load the user object with all fields.
  $user = User::load($account->id());

  // Get value of the current user organization.
  $user_organizations = [];
  if ($user->hasField('field_organization')) {
    $user_organizations = array_column($user->get('field_organization')->getValue(), 'target_id');
  }

  // Get value of the comment's organization in which the comment had been
  // left off.
  $comment_organization = NULL;
  if ($comment->hasField('field_comment_organization')) {
    $value = $comment->get('field_comment_organization')->getValue();
    $comment_organization = !empty($value[0]['target_id']) ? $value[0]['target_id'] : NULL;
  }

  // We do not allow users from different organization has any access to the
  // comments from other organizations. In the other scenario we fallback to
  // other Drupal access checks.
  return (empty($user_organizations) && empty($comment_organization)) || in_array($comment_organization, $user_organizations)
    ? AccessResult::neutral()
    : AccessResult::forbidden();
}

/**
 * Implements hook_entity_type_alter().
 */
function anu_comments_entity_type_alter(array &$entity_types) {
  // Adds an additional Validation for paragraph_comment entity.
  if (!empty($entity_types['paragraph_comment'])) {
    $entity = $entity_types['paragraph_comment'];
    $entity->addConstraint('ParagraphComment', []);
  }
}

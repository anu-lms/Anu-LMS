<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_group_group_content_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'class-group_node-course') {
    return;
  }

  try {
    $group = $entity->getGroup();
    $course = $entity->getEntity();

    // If Course was added to the Class we add all child lessons to this Class as well.
    foreach ($course->field_course_lessons as $course_lesson) {
      if (!empty($course_lesson->entity) && !$group->getContentByEntityId('group_node:lesson', $course_lesson->entity->id())) {
        $group->addContent($course_lesson->entity, 'group_node:lesson');
      }
    }
  }
  catch (\Exception $exception) {
    $message = new FormattableMarkup('Could not add lessons to classes of course @id. Error: @error', [
      '@id' => $course->id(),
      '@error' => $exception->getMessage(),
    ]);
    \Drupal::logger('anu_group')->error($message);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_group_group_content_delete(EntityInterface $entity) {
  if ($entity->bundle() != 'class-group_node-course') {
    return;
  }

  try {
    $group = $entity->getGroup();
    $course = $entity->getEntity();

    // If Course was removed from the Class we remove all child lessons from this Class as well.
    foreach ($course->field_course_lessons as $course_lesson) {
      if (empty($course_lesson->entity)) {
        continue;
      }

      $storage = \Drupal::entityTypeManager()->getStorage('group_content');
      $group_contents = $storage->loadByProperties([
        'type' => 'class-group_node-lesson',
        'entity_id' => $course_lesson->entity->id(),
        'gid' => $group->id(),
      ]);

      /** @var \Drupal\group\Entity\GroupContent $group_content */
      foreach ($group_contents as $group_content) {
        $group_content->delete();
      }
    }
  }
  catch (\Exception $exception) {
    $message = new FormattableMarkup('Could not delete lessons from classes of course @id. Error: @error', [
      '@id' => $course->id(),
      '@error' => $exception->getMessage(),
    ]);
    \Drupal::logger('anu_group')->error($message);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_group_node_update(EntityInterface $entity) {
  if ($entity->bundle() != 'lesson') {
    return;
  }

  try {
    // If use updated Project field in Lesson node, we remove lesson from all
    // previous groups and add to new Project's groups.
    $original_course_value = $entity->original->field_lesson_course->getValue();
    $new_course_value = $entity->field_lesson_course->getValue();
    if ($original_course_value != $new_course_value) {

      // Removes lesson from any previous group.
      if ($group_contents = GroupContent::loadByEntity($entity)) {

        foreach ($group_contents as $group_content) {
          $group_content->delete();
        }
      }

      if (!empty($new_course_value)) {

        // Adds lesson to all Classes from new parent Course.
        $new_course = $entity->field_lesson_course
          ->first()
          ->get('entity')
          ->getTarget()
          ->getValue();
        if ($group_contents = GroupContent::loadByEntity($new_course)) {

          /** @var \Drupal\group\Entity\GroupContent $group_content */
          foreach ($group_contents as $group_content) {
            $group_content->getGroup()->addContent($entity, 'group_node:lesson');
          }
        }
      }
    }
  }
  catch (\Exception $exception) {
    $message = new FormattableMarkup('Could not update lessons in classes of course @id. Error: @error', [
      '@id' => $entity->id(),
      '@error' => $exception->getMessage(),
    ]);
    \Drupal::logger('anu_group')->error($message);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_group_node_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'lesson') {
    return;
  }

  try {
    if (!empty($entity->field_lesson_course->getValue())) {

      // Adds lesson to all Classes from parent Course.
      $new_course = $entity->field_lesson_course
        ->first()
        ->get('entity')
        ->getTarget()
        ->getValue();
      if ($group_contents = GroupContent::loadByEntity($new_course)) {

        /** @var \Drupal\group\Entity\GroupContent $group_content */
        foreach ($group_contents as $group_content) {
          $group_content->getGroup()->addContent($entity, 'group_node:lesson');
        }
      }
    }
  }
  catch (\Exception $exception) {
    $message = new FormattableMarkup('Could not add lessons to classes of course @id. Error: @error', [
      '@id' => $entity->id(),
      '@error' => $exception->getMessage(),
    ]);
    \Drupal::logger('anu_group')->error($message);
  }
}

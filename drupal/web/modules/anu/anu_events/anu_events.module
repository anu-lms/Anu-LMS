<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\anu_events\AnuEventBase;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 */
function anu_events_entity_insert(EntityInterface $entity) {
  AnuEventBase::triggerAnuEvents('entity_insert', ['entity' => $entity]);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 */
function anu_events_paragraph_comment_delete(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  // Deletes notifications entities created for comment if comment has been removed.
  $messageService = \Drupal::service('anu_events.message');
  $messageService->deleteByCommentId($entity->id());
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object.
 */
function anu_events_paragraph_comment_update(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  // Deletes notifications entities created for comment if comment has been marked as removed.
  if ($entity->original->field_comment_deleted->getString() == '0' && $entity->field_comment_deleted->getString() == '1') {
    $messageService = \Drupal::service('anu_events.message');
    $messageService->deleteByCommentId($entity->id());
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function anu_events_message_access(EntityInterface $message, $operation, AccountInterface $account) {

  // User shouldn't see notifications if he has no an access to the referenced comment (was moved to another org eg).
  if ($operation == 'view' &&
    $message->hasField('field_message_comment') &&
    $message->field_message_comment->getValue()) {

    $comment = $message->field_message_comment->first()->get('entity')->getValue();
    return $comment->access('view') ? AccessResult::allowed() : AccessResult::forbidden();
  }

  // Allowes users to update their own message entity.
  if ($operation == 'update' &&
    $message->hasField('field_message_recipient') &&
    $message->field_message_recipient->getValue() &&
    (int) $message->field_message_recipient->getString() == $account->id()
  ) {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}

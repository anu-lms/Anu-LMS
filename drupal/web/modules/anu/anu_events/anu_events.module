<?php

use Drupal\anu_events\Event\ReplyToCommentEvent;
use Drupal\anu_events\Event\AddCommentToThreadEvent;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;

/**
 * @file
 * Contains hooks definition for Anu Events module.
 */

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_events_paragraph_comment_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }

  if (!empty($entity->field_comment_parent->getValue())) {
    // Trigger event when user replied to the comment of another user.
    $reply_to_comment_event = new ReplyToCommentEvent($entity);
    $reply_to_comment_event->trigger();

    // Trigger event when user added comment to the thread of another user.
    $add_comment_to_thread = new AddCommentToThreadEvent($entity);

    // Don't send "added to thread" notification if "replied to comment" has already been send to the same recipient.
    if ($reply_to_comment_event->getRecipient() != $add_comment_to_thread->getRecipient()) {
      $add_comment_to_thread->trigger();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_events_paragraph_comment_delete(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  // Deletes notifications entities created for comment if comment has been removed.
  $messageService = \Drupal::service('anu_events.message');
  $messageService->deleteByCommentId($entity->id());
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function anu_events_paragraph_comment_update(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph_comment') {
    return;
  }
  // Deletes notifications entities created for comment if comment has been marked as removed.
  if ($entity->original->field_comment_deleted->getString() == '0' && $entity->field_comment_deleted->getString() == '1') {
    $messageService = \Drupal::service('anu_events.message');
    $messageService->deleteByCommentId($entity->id());
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function anu_events_message_access(EntityInterface $message, $operation,  AccountInterface $account) {

  // User shouldn't see notifications if he has no an access to the referenced comment (was moved to another org eg).
  if ($message->hasField('field_message_comment') && $message->field_message_comment->getValue()) {
    return $message->field_message_comment->first()->get('entity')->getValue()->access('view') ? AccessResult::allowed() : AccessResult::forbidden();
  }

  return AccessResult::neutral();
}
